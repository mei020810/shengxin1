# 制作表格 所需文件：hisat2生成sam时的log以及基因水平的.xls文件（reasult.xls）
# 表头：Sample	 Clean data 	Mapping ratio	 Aligned concordant	 Concordantly ratio	 Total DEGs	 Up-regulated	 Down-regulated
cat nohup_HC22_1;cat nohup_HC22_2;cat nohup_HC22_3;cat nohup_Wm82_1;cat nohup_Wm82_2;cat nohup_Wm82_3
# 将所得结果扔给deepseek统计 得到前4列数据
{
 total_exact=$(tail -n +2 "HC22_1_2_3_vs_Wm82_1_2_3_results.xls" | wc -l)
 up_exact=$(tail -n +2 "HC22_1_2_3_vs_Wm82_1_2_3_results.xls" | grep -c "up$")
 down_exact=$(tail -n +2 "HC22_1_2_3_vs_Wm82_1_2_3_results.xls" | grep -c "down$")
 
 echo "精确统计结果："
 echo "Total: $total_exact"
 echo "Up: $up_exact" 
 echo "Down: $down_exact"
 echo "Up + Down = $((up_exact + down_exact))"
 }
# 将所得结果直接填进表里

vim pca_analysis.R

# 修复样本信息匹配问题的PCA脚本
cat("开始PCA分析 - 使用基因水平counts数据...\n")

library(DESeq2)
library(ggplot2)

setwd("/mnt/nfs2/stu_fy/hms/Data")

# 函数：创建样本信息（简化版）
create_sample_info <- function() {
    # 直接创建所有样本的信息，避免复杂逻辑
    all_samples <- c(
        paste0("HC22_", 1:3), paste0("Wm82_", 1:3),
        paste0("HH43_", 1:3), 
        paste0("HX3_", 1:3), 
        paste0("ZH13_", 1:3)
    )
    
    sample_info <- data.frame(
        sample = all_samples,
        variety = rep(c("HC22", "Wm82", "HH43", "HX3", "ZH13"), each = 3),
        condition = ifelse(grepl("Wm82", all_samples), "Control", "Treatment"),
        stringsAsFactors = FALSE
    )
    
    rownames(sample_info) <- sample_info$sample
    return(sample_info)
}

# 函数：读取基因水平counts数据
read_gene_counts <- function() {
    varieties <- c("HC22", "HH43", "HX3", "ZH13")
    all_counts <- NULL
    
    for (variety in varieties) {
        count_file <- paste0(variety, "_1_2_3_Wm82_1_2_3.readscount")
        cat("读取文件:", count_file, "\n")
        
        if (file.exists(count_file)) {
            counts <- read.table(count_file, header = TRUE, row.names = 1, sep = "\t")
            
            # 使用6:11列
            count_data <- counts[, 6:11]
            
            # 设置列名
            colnames(count_data) <- c(paste0(variety, "_", 1:3), paste0("Wm82_", 1:3))
            
            if (is.null(all_counts)) {
                all_counts <- count_data
                cat("首次添加，包含所有样本\n")
            } else {
                # 只添加新品种的3个重复
                new_variety_cols <- paste0(variety, "_", 1:3)
                all_counts <- cbind(all_counts, count_data[, new_variety_cols])
                cat("添加新品种:", variety, "\n")
            }
        } else {
            cat("警告: 文件不存在 -", count_file, "\n")
        }
    }
    
    cat("最终数据维度:", dim(all_counts), "\n")
    cat("样本名称:", colnames(all_counts), "\n")
    return(all_counts)
}

# 主分析流程
cat("步骤1: 创建样本信息...\n")
sample_info <- create_sample_info()
print("样本信息:")
print(sample_info)

cat("步骤2: 读取基因水平counts数据...\n")
counts_data <- read_gene_counts()

# 检查数据匹配
cat("Counts数据样本:", colnames(counts_data), "\n")
cat("样本信息中的样本:", rownames(sample_info), "\n")

# 确保样本顺序一致
counts_data <- counts_data[, rownames(sample_info)]

cat("步骤3: 数据预处理...\n")
counts_data <- round(counts_data)

cat("步骤4: 创建DESeq2对象并过滤...\n")
# 直接使用，确保行名匹配
dds <- DESeqDataSetFromMatrix(
    countData = counts_data,
    colData = sample_info,
    design = ~ condition
)

cat("原始基因数:", nrow(dds), "\n")
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep, ]
cat("过滤后保留基因数:", nrow(dds), "\n")

cat("步骤5: 数据变换和PCA...\n")
vsd <- vst(dds, blind = FALSE)
pca_data <- plotPCA(vsd, intgroup = c("condition", "variety"), returnData = TRUE)
percent_var <- round(100 * attr(pca_data, "percentVar"))

cat("步骤6: 绘制PCA图...\n")
p <- ggplot(pca_data, aes(x = PC1, y = PC2, color = condition, shape = variety)) +
    geom_point(size = 4) +
    xlab(paste0("PC1: ", percent_var[1], "% variance")) +
    ylab(paste0("PC2: ", percent_var[2], "% variance")) +
    ggtitle("PCA Plot - RNA-seq Samples") +
    theme_minimal() +
    scale_color_manual(values = c(Control = "blue", Treatment = "red"))

print(p)

# 保存结果
ggsave("PCA_plot_final.png", p, width = 10, height = 8, dpi = 300)
write.csv(pca_data, "PCA_coordinates_final.csv")
write.csv(sample_info, "sample_info_final.csv")

cat("PCA分析完成！\n")
cat("方差解释率: PC1 =", percent_var[1], "%, PC2 =", percent_var[2], "%\n")
cat("样本数量:", ncol(counts_data), "\n")
cat("基因数量:", nrow(dds), "\n")

Rscript pca_analysis.R
ls -la PCA_*.png PCA_*.csv

# 带连线和标签的PCA主成分分析图（可在R中直接操作）
library(DESeq2)
library(ggplot2)
library(ggrepel)
setwd("/mnt/nfs2/stu_fy/hms/Data")

# 读取之前的结果
pca_data <- read.csv("PCA_coordinates_final.csv", row.names = 1)
sample_info <- read.csv("sample_info_final.csv", row.names = 1)

# 创建带连接线和标签的PCA图
p <- ggplot(pca_data, aes(x = PC1, y = PC2, color = condition)) +
    geom_point(size = 4) +
    # 添加连接线和标签
    geom_text_repel(aes(label = name),
                   box.padding = 0.5,      # 文本框与点的距离
                   point.padding = 0.5,    # 文本框与点的边缘距离
                   segment.color = 'grey50', # 连接线的颜色
                   segment.size = 0.5,     # 连接线粗细
                   max.overlaps = Inf) +   # 确保所有标签都显示
    xlab("PC1: 52% variance") +
    ylab("PC2: 26% variance") +
    ggtitle("PCA Plot - RNA-seq Samples") +
    theme_bw() +
    theme(
        plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
        legend.position = "right"
    ) +
    scale_color_manual(values = c(Control = "blue", Treatment = "red"))

print(p)

# 保存图片
ggsave("PCA_with_labels.png", p, width = 12, height = 8, dpi = 300, bg = "white")



cat("开始生成样本相关性热图...\n")
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
setwd("/mnt/nfs2/stu_fy/hms/Data")

# 读取数据
sample_info <- read.csv("sample_info_final.csv", row.names = 1)

# 重新创建标准化counts（用于热图）
create_normalized_counts <- function() {
        varieties <- c("HC22", "HH43", "HX3", "ZH13")
        all_counts <- NULL
        for (variety in varieties) {
                count_file <- paste0(variety, "_1_2_3_Wm82_1_2_3.readscount")
                counts <- read.table(count_file, header = TRUE, row.names = 1, sep = "\t")
                count_data <- counts[, 6:11]
                colnames(count_data) <- c(paste0(variety, "_", 1:3), paste0("Wm82_", 1:3))
                if (is.null(all_counts)) {
                        all_counts <- count_data
                } else {
                        new_cols <- paste0(variety, "_", 1:3)
                        all_counts <- cbind(all_counts, count_data[, new_cols])
                }
        }
        return(all_counts)
}
counts_data <- create_normalized_counts()
counts_data <- round(counts_data[, rownames(sample_info)])
# 创建DESeq2对象并标准化
dds <- DESeqDataSetFromMatrix(counts_data, sample_info, ~ condition)
dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized = TRUE)

# 过滤低表达基因
keep <- rowSums(normalized_counts >= 10) >= 3
normalized_counts <- normalized_counts[keep, ]
cat("数据准备完成，开始生成热图...\n")

# 样本间相关性热图
cat("生成样本间相关性热图...\n")
sample_cor <- cor(normalized_counts, method = "pearson")
# 创建注释信息
annotation_col <- data.frame(
        Condition = sample_info$condition,
         Variety = sample_info$variety
                        )
rownames(annotation_col) <- colnames(normalized_counts)
# 颜色设置
ann_colors <- list(
                   Condition = c(Control = "blue", Treatment = "red"),
                   Variety = c(HC22 = "#E41A1C", HH43 = "#377EB8",
                               HX3 = "#4DAF4A", ZH13 = "#984EA3", Wm82 = "#FF7F00"))
# 绘制相关性热图
pheatmap(sample_cor,
         clustering_distance_rows = "euclidean",
         clustering_distance_cols = "euclidean",
         clustering_method = "complete",
         annotation_col = annotation_col,
         annotation_colors = ann_colors,
         main = "Sample-Sample Correlation Heatmap",
         color = colorRampPalette(brewer.pal(9, "Blues"))(100),
         display_numbers = TRUE,
         number_format = "%.2f",
         fontsize_number = 8,
         filename = "sample_correlation_heatmap.png",
         width = 10, height = 8)
cat("样本相关性热图生成完成: sample_correlation_heatmap.png\n")

Rscript correlation_heatmap.R


#默认颜色——热图脚本
vim default_correlation_heatmap.R

library(DESeq2)
library(pheatmap)
library(ggplot2)
setwd("/mnt/nfs2/stu_fy/hms/Data")

# 读取数据
sample_info <- read.csv("sample_info_final.csv", row.names = 1)

# 创建标准化counts
create_normalized_counts <- function() {
    varieties <- c("HC22", "HH43", "HX3", "ZH13")
    all_counts <- NULL
    for (variety in varieties) {
        count_file <- paste0(variety, "_1_2_3_Wm82_1_2_3.readscount")
        counts <- read.table(count_file, header = TRUE, row.names = 1, sep = "\t")
        count_data <- counts[, 6:11]
        colnames(count_data) <- c(paste0(variety, "_", 1:3), paste0("Wm82_", 1:3))
        if (is.null(all_counts)) {
            all_counts <- count_data
        } else {
            new_cols <- paste0(variety, "_", 1:3)
            all_counts <- cbind(all_counts, count_data[, new_cols])
        }
    }
    return(all_counts)
}
counts_data <- create_normalized_counts()
counts_data <- round(counts_data[, rownames(sample_info)])

# 创建DESeq2对象并标准化
dds <- DESeqDataSetFromMatrix(counts_data, sample_info, ~ condition)
dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized = TRUE)

# 过滤低表达基因
keep <- rowSums(normalized_counts >= 10) >= 3
normalized_counts <- normalized_counts[keep, ]
cat("数据准备完成，开始生成热图...\n")

# 保存用于热图分析的数据
write.csv(normalized_counts, "correlation_heatmap_normalized_counts.csv")
write.csv(data.frame(GeneID = rownames(normalized_counts)), 
          "correlation_heatmap_genes_list.csv", row.names = FALSE)
cat("已保存热图分析用的标准化counts数据和基因列表\n")

cat("生成样本相关性热图（默认颜色）...\n")
sample_cor <- cor(normalized_counts, method = "pearson")

# 保存相关性矩阵
write.csv(sample_cor, "sample_correlation_matrix.csv")
cat("已保存样本相关性矩阵\n")

# 创建注释信息
annotation_col <- data.frame(
    Condition = sample_info$condition,
    Variety = sample_info$variety
)
rownames(annotation_col) <- colnames(normalized_counts)

# 保存注释信息
write.csv(annotation_col, "heatmap_annotation_info.csv")
cat("已保存热图注释信息\n")

# 使用默认颜色的相关性热图
pheatmap(sample_cor,
         clustering_distance_rows = "euclidean",
         clustering_distance_cols = "euclidean", 
         annotation_col = annotation_col,
         main = "Sample Correlation Heatmap (Default Colors)",
         display_numbers = TRUE,
         number_format = "%.2f",
         filename = "sample_correlation_default.png",
         width = 10, height = 8)

# 保存其他格式的图片
p <- pheatmap(sample_cor,
              clustering_distance_rows = "euclidean",
              clustering_distance_cols = "euclidean", 
              annotation_col = annotation_col,
              main = "Sample Correlation Heatmap (Default Colors)",
              display_numbers = TRUE,
              number_format = "%.2f",
              silent = TRUE)  # 不显示，只返回对象

# 保存PDF和SVG格式
ggsave("sample_correlation_default.pdf", p, width = 10, height = 8)
ggsave("sample_correlation_default.svg", p, width = 10, height = 8, device = svg)

cat("样本相关性热图生成完成!\n")

Rscript default_correlation_heatmap.R
