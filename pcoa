vim pcoa_test.R

# PCoA分析脚本
cat("开始PCoA分析...\n")
library(DESeq2)
library(ggplot2)
library(ape)  # 用于PCoA分析
setwd("/mnt/nfs2/stu_fy/hms/Data")
# 读取数据
sample_info <- read.csv("sample_info_final.csv", row.names = 1)
# 创建DESeq2对象和标准化数据
create_normalized_data <- function() {
            varieties <- c("HC22", "HH43", "HX3", "ZH13")
    all_counts <- NULL
        for (variety in varieties) {
                        count_file <- paste0(variety, "_1_2_3_Wm82_1_2_3.readscount")
            counts <- read.table(count_file, header = TRUE, row.names = 1, sep = "\t")
                    count_data <- counts[, 6:11]
                    colnames(count_data) <- c(paste0(variety, "_", 1:3), paste0("Wm82_", 1:3))
                            if (is.null(all_counts)) {
                                                all_counts <- count_data
                            } else {
                                                new_cols <- paste0(variety, "_", 1:3)
                                        all_counts <- cbind(all_counts, count_data[, new_cols])
                                                }
                        }
        counts_data <- round(all_counts[, rownames(sample_info)])
            dds <- DESeqDataSetFromMatrix(counts_data, sample_info, ~ condition)
            dds <- estimateSizeFactors(dds)
                return(dds)
}

dds <- create_normalized_data()
vsd <- vst(dds, blind = FALSE)
normalized_counts <- counts(dds, normalized = TRUE)

# 过滤低表达基因
keep <- rowSums(normalized_counts >= 10) >= 3
normalized_counts <- normalized_counts[keep, ]
cat("数据准备完成，开始PCoA分析...\n")

# 1. 计算距离矩阵
cat("计算距离矩阵...\n")
dist_matrix <- dist(t(normalized_counts), method = "euclidean")  # 也可以尝试 "manhattan", "bray"

# 2. 执行PCoA分析
cat("执行PCoA分析...\n")
pcoa_result <- pcoa(dist_matrix, correction = "none")

# 3. 提取坐标和解释度
pcoa_scores <- pcoa_result$vectors
eig_values <- pcoa_result$values$Eigenvalues
percent_var <- round(eig_values / sum(eig_values) * 100, 1)

cat("PCoA方差解释率:\n")
cat("Axis.1:", percent_var[1], "%\n")
cat("Axis.2:", percent_var[2], "%\n")
cat("Axis.3:", percent_var[3], "%\n")

# 4. 准备绘图数据
pcoa_df <- data.frame(
                          sample = rownames(pcoa_scores),
                              Axis.1 = pcoa_scores[, 1],
                              Axis.2 = pcoa_scores[, 2],
                                  condition = sample_info$condition,
                                  variety = sample_info$variety
                                  )

# 5. 绘制PCoA图
cat("绘制PCoA图...\n")

# 版本1：按条件分色
p1 <- ggplot(pcoa_df, aes(x = Axis.1, y = Axis.2, color = condition)) +
geom_point(size = 4) +
xlab(paste0("Axis.1 (", percent_var[1], "%)")) +
ylab(paste0("Axis.2 (", percent_var[2], "%)")) +
ggtitle("PCoA Plot - By Condition") +
theme_bw() +
scale_color_manual(values = c(Control = "blue", Treatment = "red")) +
# 添加样本标签
geom_text(aes(label = sample), size = 3, vjust = -0.8, check_overlap = FALSE)

# 版本2：按品种分色
p2 <- ggplot(pcoa_df, aes(x = Axis.1, y = Axis.2, color = variety)) +
geom_point(size = 4) +
xlab(paste0("Axis.1 (", percent_var[1], "%)")) +
ylab(paste0("Axis.2 (", percent_var[2], "%)")) +
ggtitle("PCoA Plot - By Variety") +
theme_bw() +
scale_color_manual(values = c("HC22" = "#E41A1C", "HH43" = "#377EB8", 
                "HX3" = "#4DAF4A", "ZH13" = "#984EA3", 
                "Wm82" = "#FF7F00"))

# 版本3：带椭圆（按条件）
p3 <- ggplot(pcoa_df, aes(x = Axis.1, y = Axis.2, color = condition)) +
geom_point(size = 4) +
stat_ellipse(level = 0.68, linetype = 2) +  # 68%置信椭圆
xlab(paste0("Axis.1 (", percent_var[1], "%)")) +
ylab(paste0("Axis.2 (", percent_var[2], "%)")) +
ggtitle("PCoA with Confidence Ellipses") +
theme_bw() +
scale_color_manual(values = c(Control = "blue", Treatment = "red"))

# 保存图形
ggsave("PCoA_by_condition.png", p1, width = 10, height = 8, dpi = 300)
ggsave("PCoA_by_variety.png", p2, width = 10, height = 8, dpi = 300)
ggsave("PCoA_with_ellipses.png", p3, width = 10, height = 8, dpi = 300)

# 6. 保存PCoA结果
write.csv(pcoa_df, "PCoA_coordinates.csv")
write.csv(data.frame(Axis = paste0("Axis.", 1:length(percent_var)),
                                      Variance = percent_var), 
                                        "PCoA_variance.csv")

cat("PCoA分析完成！\n")
cat("生成的文件:\n")
cat("- PCoA_by_condition.png: 按条件分色\n")
cat("- PCoA_by_variety.png: 按品种分色\n")
cat("- PCoA_with_ellipses.png: 带置信椭圆\n")
cat("- PCoA_coordinates.csv: PCoA坐标\n")
cat("- PCoA_variance.csv: 方差解释率\n")
cat("\nPCoA方差解释率: Axis.1 =", percent_var[1], "%, Axis.2 =", percent_var[2], "%\n")

Rscript pcoa_test.R 

vim pcoa_labels.R




