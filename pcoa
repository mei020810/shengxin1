vim pcoa_test.R

# PCoA分析脚本
cat("开始PCoA分析...\n")
library(DESeq2)
library(ggplot2)
library(ape)  # 用于PCoA分析
setwd("/mnt/nfs2/stu_fy/hms/Data")

# 读取数据
sample_info <- read.csv("sample_info_final.csv", row.names = 1)
# 创建DESeq2对象和标准化数据
create_normalized_data <- function() {
            varieties <- c("HC22", "HH43", "HX3", "ZH13")
    all_counts <- NULL
        for (variety in varieties) {
                        count_file <- paste0(variety, "_1_2_3_Wm82_1_2_3.readscount")
            counts <- read.table(count_file, header = TRUE, row.names = 1, sep = "\t")
                    count_data <- counts[, 6:11]
                    colnames(count_data) <- c(paste0(variety, "_", 1:3), paste0("Wm82_", 1:3))
                            if (is.null(all_counts)) {
                                                all_counts <- count_data
                            } else {
                                                new_cols <- paste0(variety, "_", 1:3)
                                        all_counts <- cbind(all_counts, count_data[, new_cols])
                                                }
                        }
        counts_data <- round(all_counts[, rownames(sample_info)])
            dds <- DESeqDataSetFromMatrix(counts_data, sample_info, ~ condition)
            dds <- estimateSizeFactors(dds)
                return(dds)
}

dds <- create_normalized_data()
vsd <- vst(dds, blind = FALSE)
normalized_counts <- counts(dds, normalized = TRUE)

# 过滤低表达基因
keep <- rowSums(normalized_counts >= 10) >= 3
normalized_counts <- normalized_counts[keep, ]
cat("数据准备完成，开始PCoA分析...\n")

# 1. 计算距离矩阵
cat("计算距离矩阵...\n")
dist_matrix <- dist(t(normalized_counts), method = "euclidean")  # 也可以尝试 "manhattan", "bray"

# 2. 执行PCoA分析
cat("执行PCoA分析...\n")
pcoa_result <- pcoa(dist_matrix, correction = "none")

# 3. 提取坐标和解释度
pcoa_scores <- pcoa_result$vectors
eig_values <- pcoa_result$values$Eigenvalues
percent_var <- round(eig_values / sum(eig_values) * 100, 1)

cat("PCoA方差解释率:\n")
cat("Axis.1:", percent_var[1], "%\n")
cat("Axis.2:", percent_var[2], "%\n")
cat("Axis.3:", percent_var[3], "%\n")

# 4. 准备绘图数据
pcoa_df <- data.frame(
                          sample = rownames(pcoa_scores),
                              Axis.1 = pcoa_scores[, 1],
                              Axis.2 = pcoa_scores[, 2],
                                  condition = sample_info$condition,
                                  variety = sample_info$variety
                                  )

# 5. 绘制PCoA图
cat("绘制PCoA图...\n")

# 版本1：按条件分色
p1 <- ggplot(pcoa_df, aes(x = Axis.1, y = Axis.2, color = condition)) +
geom_point(size = 4) +
xlab(paste0("Axis.1 (", percent_var[1], "%)")) +
ylab(paste0("Axis.2 (", percent_var[2], "%)")) +
ggtitle("PCoA Plot - By Condition") +
theme_bw() +
scale_color_manual(values = c(Control = "blue", Treatment = "red")) +
# 添加样本标签
geom_text(aes(label = sample), size = 3, vjust = -0.8, check_overlap = FALSE)

# 版本2：按品种分色
p2 <- ggplot(pcoa_df, aes(x = Axis.1, y = Axis.2, color = variety)) +
geom_point(size = 4) +
xlab(paste0("Axis.1 (", percent_var[1], "%)")) +
ylab(paste0("Axis.2 (", percent_var[2], "%)")) +
ggtitle("PCoA Plot - By Variety") +
theme_bw() +
scale_color_manual(values = c("HC22" = "#E41A1C", "HH43" = "#377EB8", 
                "HX3" = "#4DAF4A", "ZH13" = "#984EA3", 
                "Wm82" = "#FF7F00"))

# 版本3：带椭圆（按条件）
p3 <- ggplot(pcoa_df, aes(x = Axis.1, y = Axis.2, color = condition)) +
geom_point(size = 4) +
stat_ellipse(level = 0.68, linetype = 2) +  # 68%置信椭圆
xlab(paste0("Axis.1 (", percent_var[1], "%)")) +
ylab(paste0("Axis.2 (", percent_var[2], "%)")) +
ggtitle("PCoA with Confidence Ellipses") +
theme_bw() +
scale_color_manual(values = c(Control = "blue", Treatment = "red"))

# 保存图形
ggsave("PCoA_by_condition.png", p1, width = 10, height = 8, dpi = 300)
ggsave("PCoA_by_variety.png", p2, width = 10, height = 8, dpi = 300)
ggsave("PCoA_with_ellipses.png", p3, width = 10, height = 8, dpi = 300)

# 6. 保存PCoA结果
write.csv(pcoa_df, "PCoA_coordinates.csv")
write.csv(data.frame(Axis = paste0("Axis.", 1:length(percent_var)),
                                      Variance = percent_var), 
                                        "PCoA_variance.csv")

cat("PCoA分析完成！\n")
cat("生成的文件:\n")
cat("- PCoA_by_condition.png: 按条件分色\n")
cat("- PCoA_by_variety.png: 按品种分色\n")
cat("- PCoA_with_ellipses.png: 带置信椭圆\n")
cat("- PCoA_coordinates.csv: PCoA坐标\n")
cat("- PCoA_variance.csv: 方差解释率\n")
cat("\nPCoA方差解释率: Axis.1 =", percent_var[1], "%, Axis.2 =", percent_var[2], "%\n")

Rscript pcoa_test.R 


vim pcoa_all_genes_labels.R

library(DESeq2)
library(ggplot2)
library(ggrepel)
setwd("/mnt/nfs2/stu_fy/hms/Data")

# 函数：创建样本信息
create_sample_info <- function() {
	    all_samples <- c(
			             paste0("HC22_", 1:3), paste0("Wm82_", 1:3),
				             paste0("HH43_", 1:3), 
				             paste0("HX3_", 1:3), 
					             paste0("ZH13_", 1:3)
					         )
    sample_info <- data.frame(
			              sample = all_samples,
				              variety = rep(c("HC22", "Wm82", "HH43", "HX3", "ZH13"), each = 3),
				              condition = ifelse(grepl("Wm82", all_samples), "Control", "Treatment"),
					              stringsAsFactors = FALSE
					          )
        rownames(sample_info) <- sample_info$sample
        return(sample_info)
}

# 函数：读取基因水平counts数据
read_gene_counts <- function() {
	    varieties <- c("HC22", "HH43", "HX3", "ZH13")
    all_counts <- NULL
        
        for (variety in varieties) {
		        count_file <- paste0(variety, "_1_2_3_Wm82_1_2_3.readscount")
            cat("读取文件:", count_file, "\n")
	            
	            if (file.exists(count_file)) {
			                counts <- read.table(count_file, header = TRUE, row.names = 1, sep = "\t")
	                count_data <- counts[, 6:11]
			            colnames(count_data) <- c(paste0(variety, "_", 1:3), paste0("Wm82_", 1:3))
			            
			            if (is.null(all_counts)) {
					                    all_counts <- count_data
				                    cat("首次添加，包含所有样本\n")
						                } else {
									                # 只添加新品种的3个重复
									                new_variety_cols <- paste0(variety, "_", 1:3)
						                    all_counts <- cbind(all_counts, count_data[, new_variety_cols])
								                    cat("添加新品种:", variety, "\n")
								                }
				            } else {
						                cat("警告: 文件不存在 -", count_file, "\n")
					            }
	        }
        
        cat("最终数据维度:", dim(all_counts), "\n")
	    cat("样本名称:", colnames(all_counts), "\n")
	    return(all_counts)
}

# 主分析流程
cat("步骤1: 创建样本信息...\n")
sample_info <- create_sample_info()

cat("步骤2: 读取基因水平counts数据...\n")
counts_data <- read_gene_counts()
counts_data <- counts_data[, rownames(sample_info)]
counts_data <- round(counts_data)

cat("步骤3: 创建DESeq2对象并过滤...\n")
dds <- DESeqDataSetFromMatrix(counts_data,sample_info,~ condition)

cat("原始基因数:", nrow(dds), "\n")
keep <- rowSums(counts(dds)) > 0
dds <- dds[keep, ]
cat("过滤后保留基因数:", nrow(dds), "\n")

cat("步骤4: 数据变换和手动PCoA（使用所有基因）...\n")
vsd <- vst(dds, blind = FALSE)

# 手动进行PCoA - 使用所有基因
vsd_matrix <- assay(vsd)
cat("用于PCA的基因数量:", nrow(vsd_matrix), "\n")
# 计算样本间距离矩阵
sample_dists <- dist(t(vsd_matrix))

# PCoA分析
pcoa <- cmdscale(sample_dists, k=3, eig=TRUE)
pcoa_data <- as.data.frame(pcoa$points)
colnames(pcoa_data) <- c("PCoA1", "PCoA2", "PCoA3")

# 计算方差解释率
eig <- pcoa$eig
percent_var <- round(100 * eig[1:2] / sum(eig), 1)

# 添加样本信息
pcoa_data <- cbind(pcoa_data, sample_info[rownames(pcoa_data), ])

# 添加样本名称列（用于标签）
pcoa_data$name <- rownames(pcoa_data)

cat("步骤5: 绘制带标签的PCoA图（使用所有", nrow(vsd_matrix), "个基因）...\n")
p <- ggplot(pcoa_data, aes(x = PCoA1, y = PCoA2, color = condition)) +
	    geom_point(size = 4, shape = 16) +
	        # 添加连接线和标签
	        geom_text_repel(aes(label = name),
				                   box.padding = 0.5,      # 文本框与点的距离
						                      point.padding = 0.5,    # 文本框与点的边缘距离
						                      segment.color = 'grey50', # 连接线的颜色
								                         segment.size = 0.5,     # 连接线粗细
								                         max.overlaps = Inf,     # 确保所有标签都显示
											                    size = 3) +             # 标签字体大小
    xlab(paste0("PCoA1: ", percent_var[1], "% variance")) +
	        ylab(paste0("PCoA2: ", percent_var[2], "% variance")) +
		    ggtitle(paste0("PCoA Plot - All", nrow(vsd_matrix), "Genes")) +
		        theme_bw() +
			    theme(
				          plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
					          legend.position = "right"
					      ) +
    scale_color_manual(values = c(Control = "blue", Treatment = "red"))

    print(p)

# 保存结果
ggsave("PCoA_all_genes_labels.png", p, width = 12, height = 8, dpi = 300, bg = "white")
ggsave("PCoA_all_genes_labels.pdf", p, width = 12, height = 8, bg = "white")
ggsave("PCoA_all_genes_labels.svg", p, width = 12, height = 8, bg = "white", device = svg)
write.csv(pcoa_data, "PCoA_all_genes_with_labels.csv")
write.csv(data.frame(sample_info), "sample_info_final.csv")
write.csv(as.data.frame(counts(dds)), "PCoA_allgenes_filtered_counts.csv")
write.csv(data.frame(GeneID = rownames(dds)), "PCoA_allgenes_filtered_geneslist.csv", row.names = FALSE)

cat("PCoA分析完成！\n")
cat("使用的基因数量:", nrow(vsd_matrix), "\n")
cat("方差解释率: PC1 =", percent_var[1], "%, PC2 =", percent_var[2], "%\n")
cat("样本数量:", ncol(counts_data), "\n")

Rscript pcoa_all_genes_labels.R
