vim pca_all_genes.R

library(DESeq2)
library(ggplot2)
library(ggrepel)
setwd("/mnt/nfs2/stu_fy/hms/Data")

# 函数：创建样本信息
create_sample_info <- function() {
	    all_samples <- c(
			             paste0("HC22_", 1:3), paste0("Wm82_", 1:3),
				             paste0("HH43_", 1:3), 
				             paste0("HX3_", 1:3), 
					             paste0("ZH13_", 1:3)
					         )
    sample_info <- data.frame(
			              sample = all_samples,
				              variety = rep(c("HC22", "Wm82", "HH43", "HX3", "ZH13"), each = 3),
				              condition = ifelse(grepl("Wm82", all_samples), "Control", "Treatment"),
					              stringsAsFactors = FALSE
					          )
        rownames(sample_info) <- sample_info$sample
        return(sample_info)
}

# 函数：读取基因水平counts数据
read_gene_counts <- function() {
	    varieties <- c("HC22", "HH43", "HX3", "ZH13")
    all_counts <- NULL
        
        for (variety in varieties) {
		        count_file <- paste0(variety, "_1_2_3_Wm82_1_2_3.readscount")
            cat("读取文件:", count_file, "\n")
	            
	            if (file.exists(count_file)) {
			                counts <- read.table(count_file, header = TRUE, row.names = 1, sep = "\t")
	                count_data <- counts[, 6:11]
			            colnames(count_data) <- c(paste0(variety, "_", 1:3), paste0("Wm82_", 1:3))
			            
			            if (is.null(all_counts)) {
					                    all_counts <- count_data
				                    cat("首次添加，包含所有样本\n")
						                } else {
									                # 只添加新品种的3个重复
									                new_variety_cols <- paste0(variety, "_", 1:3)
						                    all_counts <- cbind(all_counts, count_data[, new_variety_cols])
								                    cat("添加新品种:", variety, "\n")
								                }
				            } else {
						                cat("警告: 文件不存在 -", count_file, "\n")
					            }
	        }
        
        cat("最终数据维度:", dim(all_counts), "\n")
	    cat("样本名称:", colnames(all_counts), "\n")
	    return(all_counts)
}

# 主分析流程
cat("步骤1: 创建样本信息...\n")
sample_info <- create_sample_info()
print("样本信息:")
print(sample_info)

cat("步骤2: 读取基因水平counts数据...\n")
counts_data <- read_gene_counts()

# 检查数据匹配
cat("Counts数据样本:", colnames(counts_data), "\n")
cat("样本信息中的样本:", rownames(sample_info), "\n")

# 确保样本顺序一致
counts_data <- counts_data[, rownames(sample_info)]

cat("步骤3: 数据预处理...\n")
counts_data <- round(counts_data)

cat("步骤4: 创建DESeq2对象并过滤...\n")
dds <- DESeqDataSetFromMatrix(
			          countData = counts_data,
				      colData = sample_info,
				      design = ~ condition
				      )

cat("原始基因数:", nrow(dds), "\n")
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep, ]
cat("过滤后保留基因数:", nrow(dds), "\n")

cat("步骤5: 数据变换和手动PCA（使用所有基因）...\n")
vsd <- vst(dds, blind = FALSE)

# 手动进行PCA - 使用所有基因
vsd_matrix <- assay(vsd)
cat("用于PCA的基因数量:", nrow(vsd_matrix), "\n")

# 手动PCA计算
pca_result <- prcomp(t(vsd_matrix), scale. = TRUE)
pca_data <- as.data.frame(pca_result$x)

# 计算方差解释率
percent_var <- round(100 * pca_result$sdev^2 / sum(pca_result$sdev^2), 1)
cat("PC1方差解释率:", percent_var[1], "%\n")
cat("PC2方差解释率:", percent_var[2], "%\n")

# 添加样本信息
pca_data <- cbind(pca_data, sample_info[rownames(pca_data), ])

# 添加样本名称列（用于标签）
pca_data$name <- rownames(pca_data)

	cat("步骤6: 绘制带标签的PCA图（使用所有", nrow(vsd_matrix), "个基因）...\n")
p <- ggplot(pca_data, aes(x = PC1, y = PC2, color = condition)) +
	    geom_point(size = 4, shape = 16) +
	        # 添加连接线和标签
	        geom_text_repel(aes(label = name),
				                   box.padding = 0.5,      # 文本框与点的距离
						                      point.padding = 0.5,    # 文本框与点的边缘距离
						                      segment.color = 'grey50', # 连接线的颜色
								                         segment.size = 0.5,     # 连接线粗细
								                         max.overlaps = Inf,     # 确保所有标签都显示
											                    size = 3) +             # 标签字体大小
    xlab(paste0("PC1: ", percent_var[1], "% variance")) +
	        ylab(paste0("PC2: ", percent_var[2], "% variance")) +
		    ggtitle(paste0("PCA Plot - All ", nrow(vsd_matrix), " Genes")) +
		        theme_bw() +
			    theme(
				          plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
					          legend.position = "right"
					      ) +
    scale_color_manual(values = c(Control = "blue", Treatment = "red"))

    print(p)

# 保存结果
ggsave("PCA_all_genes_labels.png", p, width = 12, height = 8, dpi = 300, bg = "white")
write.csv(pca_data, "PCA_all_genes_with_labels.csv")
	write.csv(sample_info, "sample_info_final.csv")

cat("PCA分析完成！\n")
cat("使用的基因数量:", nrow(vsd_matrix), "\n")
cat("方差解释率: PC1 =", percent_var[1], "%, PC2 =", percent_var[2], "%\n")
cat("样本数量:", ncol(counts_data), "\n")

Rscript pca_all_genes.R
